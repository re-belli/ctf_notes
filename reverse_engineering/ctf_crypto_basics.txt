# Convert hex values to ASCII characters 
>>> x = [0x66, 0x6c, 0x61, 0x67, 0x7b, 0x48, 0x75, 0x43, 0x66, 0x5f, 0x6c, 0x41, 0x62, 0x7d]
>>> input = ""
>>> for i in x:
...     input += chr(i)
... 
>>> input
'flag{HuCf_lAb}'
>>> 




# Convert ASCII characters to hex and print them
>>> key  = ("U","V","W","X","Y","Z","Q","R","S","T")
>>> for i in key:
...     print(hex(ord(i)))
... 
0x55
0x56
0x57
0x58
0x59
0x5a
0x51
0x52
0x53
0x54




# Decrypt a XOR-encrypted message using a repeating key
#!/usr/bin/python3
from itertools import cycle
def xor():    
    key = "aliens"
    hex_list = [0x29, 0x38, 0x2b, 0x1e, 0x06, 0x42, 0x05, 0x5d, 0x07, 0x02, 0x31, 0x42, 0x0f, 0x33, 0x0a, 0x55, 0x00, 0x00, 0x15, 0x1e, 0x1c, 0x06, 0x1a, 0x43, 0x13, 0x59, 0x36, 0x54, 0x00, 0x42, 0x15, 0x11]
    temp = ""
    for i in hex_list:
        temp += chr(i)
    flag = ''.join(chr(ord(c)^ord(k)) for c,k in zip(temp, cycle(key)))
    print(flag)

def main():
    xor()

if __name__ == "__main__":
    main()



# Decrypt a list of XOR-encrypted bytes using a single-byte key
def decrypt(xored_bytes, key):
    decrypted_bytes = [byte ^ key for byte in xored_bytes]
    decrypted_string = ''.join(chr(byte) for byte in decrypted_bytes)
    return decrypted_string

xored_bytes = [0x68, 0x0E, 0x08, 0x51, 0x58, 0x5C, 0x0B, 0x00, 0x56, 0x01, 0x0C, 0x08, 0x0B, 0x02, 0x1D, 0x04]
key = 0x41

decrypted_string = decrypt(xored_bytes, key)

print("Decrypted string:", decrypted_string)



# Decrypt a list of XOR-encrypted bytes using a repeating key
def decrypt(xored_bytes, key):
    decrypted_bytes = []
    key_length = len(key)
    for i, byte in enumerate(xored_bytes):
        # Using mod to cycle through the key
        decrypted_byte = byte ^ ord(key[i % key_length])
        decrypted_bytes.append(decrypted_byte)
    decrypted_string = ''.join(chr(byte) for byte in decrypted_bytes)
    return decrypted_string

xored_bytes = [0x68, 0x0E, 0x08, 0x51, 0x58, 0x5C, 0x0B, 0x00, 0x56, 0x01, 0x0C, 0x08, 0x0B, 0x02, 0x1D, 0x04]
key = "test"

decrypted_string = decrypt(xored_bytes, key)

print("Decrypted string:", decrypted_string)




# Performs bitwise XOR between each byte in the list and the given mask
def apply_xor(byte_list, mask):
    # XOR each byte with the mask and store the result in a new list
    result = [byte ^ mask for byte in byte_list]
    return result

byte_list = [0x9f, 0xa1, 0xa3, 0xa5, 0xa7]
mask = 0x0f

result = apply_xor(byte_list, mask)

print("XOR result:", result)
